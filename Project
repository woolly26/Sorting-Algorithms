#include <iostream>
#include <fstream>
#include <cstdlib>    
#include <ctime>
#include <algorithm>
#include <chrono>
using namespace std;
void read_array(int arr[], int size);
// Function definition
void read_array(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << "Enter element " << i + 1 << ": ";
        cin >> arr[i];
    }
}
void generate_arrays(int num_arrays, int array_size) {
    ofstream outfile("in.txt");
    srand(time(NULL));
    for (int i = 0; i < num_arrays; i++) {
        for (int j = 0; j < array_size; j++) {
            int val = rand() % 10001;
            outfile << val << " ";
        }
        outfile << endl;
    }
    outfile.close();
}

// Selection Sort Algorithm
void selection_sort(int arr[], int n) {
    int i, j, min_idx;

    for (i = 0; i < n-1; i++) {
        min_idx = i;
        for (j = i+1; j < n; j++)
            if (arr[j] < arr[min_idx])
                min_idx = j;

        swap(arr[min_idx], arr[i]);
    }
}

// Bubble Sort Algorithm
void bubble_sort(int arr[], int n) {
    int i, j;
    for (i = 0; i < n-1; i++)
        for (j = 0; j < n-i-1; j++)
            if (arr[j] > arr[j+1])
                swap(arr[j], arr[j+1]);
}

// Insertion Sort Algorithm
void insertion_sort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

// Merge Sort Algorithm
void merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];

    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void merge_sort(int arr[], int l, int r) {
    if (l < r) {
        int m = l+(r-l)/2;

        merge_sort(arr, l, m);
        merge_sort(arr, m+1, r);

        merge(arr, l, m, r);
    }
}

// Quick Sort Algorithm
int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);
for (int j = low; j <= high - 1; j++) {
if (arr[j] <= pivot) {
i++;
swap(arr[i], arr[j]);
}
}
swap(arr[i + 1], arr[high]);
return (i + 1);
}

void quick_sort(int arr[], int low, int high) {
if (low < high) {
int pi = partition(arr, low, high);

    quick_sort(arr, low, pi - 1);
    quick_sort(arr, pi + 1, high);
}
}

// Heap Sort Algorithm
void heapify(int arr[], int n, int i) {
int largest = i;
int l = 2*i + 1;
int r = 2*i + 2;

if (l < n && arr[l] > arr[largest])
    largest = l;

if (r < n && arr[r] > arr[largest])
    largest = r;

if (largest != i) {
    swap(arr[i], arr[largest]);
    heapify(arr, n, largest);
}
}

void heap_sort(int arr[], int n) {
for (int i = n / 2 - 1; i >= 0; i--)
heapify(arr, n, i);
for (int i=n-1; i>=0; i--) {
    swap(arr[0], arr[i]);
    heapify(arr, i, 0);
}
}

// Counting Sort Algorithm
void counting_sort(int arr[], int n) {
int output[n];
int max_num = arr[0];

for (int i = 1; i < n; i++) {
    if (arr[i] > max_num)
        max_num = arr[i];
}

int count[max_num + 1] = {0};

for (int i = 0; i < n; i++)
    count[arr[i]]++;

for (int i = 1; i <= max_num; i++)
    count[i] += count[i - 1];

for (int i = n - 1; i >= 0; i--) {
    output[count[arr[i]] - 1] = arr[i];
    count[arr[i]]--;
}

for (int i = 0; i < n; i++)
    arr[i] = output[i];
}
// Radix Sort Algorithm
int get_max(int arr[], int n) {
int max = arr[0];
for (int i = 1; i < n; i++)
if (arr[i] > max)
max = arr[i];
return max;
}
void count_sort(int arr[], int n, int exp) {
int output[n];
int count[10] = {0};

for (int i = 0; i < n; i++)
    count[(arr[i] / exp) % 10]++;
for (int i = 1; i < 10; i++)
    count[i] += count[i - 1];
for (int i = n - 1; i >= 0; i--) {
    output[count[(arr[i] / exp) % 10] - 1] = arr[i];
    count[(arr[i] / exp) % 10]--;
}
for (int i = 0; i < n; i++)
    arr[i] = output[i];
}

void radix_sort(int arr[], int n) {
// finding the maximum element
int m = get_max(arr, n);

// Counting sort for every digit
for (int exp = 1; m/exp > 0; exp *= 10)
    count_sort(arr, n, exp);
}

int main() {
    int my_array[5];

    // Function call
    read_array(my_array, 5);

    // Displaying array elements
    for (int i = 0; i < 5; i++) {
        cout << my_array[i] << " ";
    }
    cout << endl;

    return 0;
int num_arrays, array_size;
cin >> num_arrays >> array_size;
generate_arrays(num_arrays, array_size);

cout << "Algorithm\t10\t\t100\t\t1000\t\t10000\t\t100000" << endl;
cout << "--------------------------------------------------------" << endl;
// Selection Sort
cout << "Selection Sort\t";
for (int i = 0; i < num_arrays; i++) {
    int arr[array_size];
    read_array(arr, i);
    auto start = high_resolution_clock::now();
    selection_sort(arr, array_size);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << duration.count() << "\t";
}
cout << endl;
// Bubble Sort
cout << "Bubble Sort\t";
for (int i = 0; i < num_arrays; i++) {
    int arr[array_size];
    read_array(arr, i);
    auto start = high_resolution_clock::now();
    bubble_sort(arr, array_size);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << duration.count() << "\t";
}
cout << endl;
// Insertion Sort
cout << "Insertion Sort\t";
for (int i = 0; i < num_arrays; i++) {
    int arr[array_size];
    read_array(arr, i);
    auto start = high_resolution_clock::now();
    insertion_sort(arr, array_size);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << duration.count() << "\t";
}
cout << endl;
// Merge Sort
cout << "Merge Sort\t";
for (int i = 0; i < num_arrays; i++) {
    int arr[array_size];
    read_array(arr, i);
    auto start = high_resolution_clock::now();
    merge_sort(arr, 0, array_size - 1);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << duration.count() << "\t";
}
cout << endl;
// Quick Sort
cout << "Quick Sort\t";
for (int i = 0; i < num_arrays; i++) {
    int arr[array_size];
    read_array(arr, i);
    auto start = high_resolution_clock::now();
    quick_sort(arr, 0, array_size - 1);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << duration.count() << "\t";
}
cout << endl;
// Heap Sort
cout << "Heap Sort\t";
for (int i = 0; i < num_arrays; i++) {
    int arr[array_size];
    read_array(arr, i);
    auto start = high_resolution_clock::now();
    heap_sort(arr, array_size);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << duration.count() << "\t";
}
cout << endl;
// Counting Sort
cout << "Counting Sort\t";
for (int i = 0; i < num_arrays; i++) {
int arr[array_size];
read_array(arr, i);
auto start = high_resolution_clock::now();
counting_sort(arr, array_size);
auto stop = high_resolution_clock::now();
auto duration = duration_cast<microseconds>(stop - start);
cout << duration.count() << "\t";
}
cout << endl;
// Radix Sort
cout << "Radix Sort\t";
for (int i = 0; i < num_arrays; i++) {
    int arr[array_size];
    read_array(arr, i);
    auto start = high_resolution_clock::now();
    radix_sort(arr, array_size);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << duration.count() << "\t";
}
cout << endl;

return 0;
}
